// Terraform plugin for creating random ids
resource "random_id" "instance_id" {
 byte_length = 8
}

// A single Google Cloud Engine instance
resource "google_compute_instance" "valeriadefault" {
 name         = "valeria-${random_id.instance_id.hex}"
 machine_type = "f1-micro"
 zone         = "us-west1-a"

 // Install software using remote-exec provisioner
 provisioner "remote-exec" {
   inline = [
      "sudo apt-get -y install tcpdump"
   ]

   connection {
    type     = "ssh"
    host     = "${google_compute_instance.valeriadefault.network_interface.0.access_config.0.nat_ip}"
    user     = "${var.VM_USERNAME}"
    private_key = "${file("C:/Users/U381310/.ssh/id_rsa")}"
  }
 }

 // Upload a file using file provisioner
 provisioner "file" {
       source      = "../scripts/my_script.sh"
       destination = "/tmp/my_script.sh"

    connection {
      type     = "ssh"
      host     = "${google_compute_instance.valeriadefault.network_interface.0.access_config.0.nat_ip}"
      user     = "${var.VM_USERNAME}"
      private_key = "${file("C:/Users/U381310/.ssh/id_rsa")}"
   }
 }

 // Execute a script remotely using remote-exec provisioner
 provisioner "remote-exec" {
   inline = [
     "chmod a+x /tmp/my_script.sh",
      "/tmp/my_script.sh"
   ]

   connection {
    type     = "ssh"
    host     = "${google_compute_instance.valeriadefault.network_interface.0.access_config.0.nat_ip}"
    user     = "${var.VM_USERNAME}"
    private_key = "${file("C:/Users/U381310/.ssh/id_rsa")}"
  }
 }

 // Create the Ansible inventory locally using the local-exec provisioner 
 provisioner "local-exec" {
    command = "echo '[all]' > inventory.txt && echo ${google_compute_instance.valeriadefault.network_interface.0.access_config.0.nat_ip} >> inventory.txt"
 }

 // Provision using Ansible with local-exec provisioner
 //provisioner "local-exec" {
   // command = "sleep 40; ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -u ${var.VM_USERNAME} --private-key ~/.ssh/id_rsa -i inventory.txt ../playbooks/ansible-playbook.yml" 
 //}

 boot_disk {
   initialize_params {
     image = "${lookup(var.IMAGE,var.REGION)}"
   }
 }

 network_interface {
   network = "default"

   access_config {
     // Include this section to give the VM an external ip address
   }
 }
 metadata = {
   ssh-keys = "${var.VM_USERNAME}:${file("C:/Users/U381310/.ssh/id_rsa.pub")}"
 }
}

output "ip" {
    value = "${google_compute_instance.valeriadefault.network_interface.0.access_config.0.nat_ip}"
}

resource "google_compute_attached_disk" "disk1_attachment" {
  disk = "${google_compute_disk.disk1.self_link}"
  instance = "${google_compute_instance.valeriadefault.self_link}"
  
  provisioner "remote-exec" {
    inline = [
     "sleep 60",
     "sudo parted /dev/sdb --script -- mklabel msdos",
     "sudo parted -a optimal /dev/sdb mkpart primary 0% 1024MB",
     "sudo mkfs.ext4 /dev/sdb1",
     "sudo mkdir dir /mnt/vale-disk",
     "sudo mount -t ext4 /dev/sdb1 /mnt/vale-disk"
   ]

   connection {
    type     = "ssh"
    host     = "${google_compute_instance.valeriadefault.network_interface.0.access_config.0.nat_ip}"
    user     = "${var.VM_USERNAME}"
    private_key = "${file("C:/Users/U381310/.ssh/id_rsa")}"
   }
  }
}
